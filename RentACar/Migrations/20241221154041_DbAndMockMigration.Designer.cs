// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.Data;

#nullable disable

namespace RentACar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241221154041_DbAndMockMigration")]
    partial class DbAndMockMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentACar.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaintenanceId")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fuel = "Gasoline",
                            Make = "Audi",
                            ManufactureYear = 2020,
                            Model = "A4",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 2,
                            Fuel = "Diesel",
                            Make = "BMW",
                            ManufactureYear = 2019,
                            Model = "3 Series",
                            isAvailable = true
                        },
                        new
                        {
                            Id = 3,
                            Fuel = "Hybrid",
                            Make = "Mercedes-Benz",
                            ManufactureYear = 2021,
                            Model = "C-Class",
                            isAvailable = false
                        });
                });

            modelBuilder.Entity("RentACar.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main Street, London",
                            Email = "john.smith@example.com",
                            FirstName = "John",
                            LastName = "Smith",
                            Phone = "061-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            Address = "12 Rue de Paris, Paris",
                            Email = "marie.dupont@example.com",
                            FirstName = "Marie",
                            LastName = "Dupont",
                            Phone = "064-987-6543"
                        },
                        new
                        {
                            Id = 3,
                            Address = "45 Avenida de Madrid, Madrid",
                            Email = "carlos.garcia@example.com",
                            FirstName = "Carlos",
                            LastName = "Garcia",
                            Phone = "062-555-5555"
                        });
                });

            modelBuilder.Entity("RentACar.Models.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MaitenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[CarId] IS NOT NULL");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("RentACar.Models.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("PricePerDay")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[CarId] IS NOT NULL");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("RentACar.Models.Maintenance", b =>
                {
                    b.HasOne("RentACar.Models.Car", "Car")
                        .WithOne("Maintenance")
                        .HasForeignKey("RentACar.Models.Maintenance", "CarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Car");
                });

            modelBuilder.Entity("RentACar.Models.Rental", b =>
                {
                    b.HasOne("RentACar.Models.Car", "Car")
                        .WithOne("Rental")
                        .HasForeignKey("RentACar.Models.Rental", "CarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RentACar.Models.Customer", "Customer")
                        .WithOne("Rental")
                        .HasForeignKey("RentACar.Models.Rental", "CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RentACar.Models.Car", b =>
                {
                    b.Navigation("Maintenance");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("RentACar.Models.Customer", b =>
                {
                    b.Navigation("Rental");
                });
#pragma warning restore 612, 618
        }
    }
}
